"use client";

import { useState } from "react";

import { useSession } from "next-auth/react";
import Image from "next/image";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { toast } from "@/hooks/use-toast";
import api from "@/services/api";
import { zodResolver } from "@hookform/resolvers/zod";

import { Spinner } from "../ui/spinner";

// Updated schema to include password validation
const FormSchema = z.object({
  token: z.string().min(2, {
    message: "Token must be 6 digits.",
  }),
});

export const ClientVerifyForm = () => {
  const session = useSession();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      token: "",
    },
  });

  function onSubmit(data: z.infer<typeof FormSchema>) {
    setIsLoading(true);
    const body = {
      userId: session.data?.user?.id,
      token: data.token,
    };

    api
      .post("/2fa/verify", body)
      .then(async () => {
        setIsLoading(false);
        // Update the session with the new `verify` property
        await session.update({ verify: true });
        toast({
          title: "Verified",
        });
        setTimeout(() => {
          window.location.href = `/user`;
        }, 2000);
      })
      .catch(() => {
        setIsLoading(false);
        toast({
          title: "Error",
          description: "Invalid verification code",
        });
        // toast({
        //   title: "Error",
        //   description: (
        //     <pre className="mt-2 w-[340px] rounded-md bg-slate-950 p-4">
        //       <code className="text-white">
        //         {JSON.stringify(error, null, 2)}
        //       </code>
        //     </pre>
        //   ),
        // })
      });
  }

  return (
    <div className="flex justify-center w-full h-screen items-center">
      <Form {...form}>
        <form
          onSubmit={form.handleSubmit(onSubmit)}
          className="w-1/4 space-y-6"
        >
          <div className="flex justify-center">
            <Image
              src="/static/images/star.webp"
              width={100}
              height={100}
              alt="logo"
            />
          </div>
          <p className="text-center">
            Enter the 6-digit authentication code generated by your app:
          </p>
          {/* token Field */}
          <FormField
            control={form.control}
            name="token"
            render={({ field }) => (
              <FormItem>
                <FormControl>
                  <Input placeholder="XXXXXX" type="number" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="flex justify-center">
            <Button
              type="submit"
              disabled={isLoading}
              className="w-full bg-blue-500"
            >
              {isLoading && <Spinner />}
              <span className={isLoading ? "ml-2" : ""}>Verify</span>
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
};
